/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$close-name: 'close';
$close-x: 0px;
$close-y: 35px;
$close-offset-x: 0px;
$close-offset-y: -35px;
$close-width: 12px;
$close-height: 12px;
$close-total-width: 150px;
$close-total-height: 182px;
$close-image: './src/assets/images/icons.png';
$close: (0px, 35px, 0px, -35px, 12px, 12px, 150px, 182px, './src/assets/images/icons.png', 'close', );
$expandable-name: 'expandable';
$expandable-x: 0px;
$expandable-y: 16px;
$expandable-offset-x: 0px;
$expandable-offset-y: -16px;
$expandable-width: 6px;
$expandable-height: 9px;
$expandable-total-width: 150px;
$expandable-total-height: 182px;
$expandable-image: './src/assets/images/icons.png';
$expandable: (0px, 16px, 0px, -16px, 6px, 9px, 150px, 182px, './src/assets/images/icons.png', 'expandable', );
$expanded-name: 'expanded';
$expanded-x: 0px;
$expanded-y: 0px;
$expanded-offset-x: 0px;
$expanded-offset-y: 0px;
$expanded-width: 6px;
$expanded-height: 6px;
$expanded-total-width: 150px;
$expanded-total-height: 182px;
$expanded-image: './src/assets/images/icons.png';
$expanded: (0px, 0px, 0px, 0px, 6px, 6px, 150px, 182px, './src/assets/images/icons.png', 'expanded', );
$item-name: 'item';
$item-x: 0px;
$item-y: 57px;
$item-offset-x: 0px;
$item-offset-y: -57px;
$item-width: 14px;
$item-height: 14px;
$item-total-width: 150px;
$item-total-height: 182px;
$item-image: './src/assets/images/icons.png';
$item: (0px, 57px, 0px, -57px, 14px, 14px, 150px, 182px, './src/assets/images/icons.png', 'item', );
$items-name: 'items';
$items-x: 0px;
$items-y: 81px;
$items-offset-x: 0px;
$items-offset-y: -81px;
$items-width: 16px;
$items-height: 14px;
$items-total-width: 150px;
$items-total-height: 182px;
$items-image: './src/assets/images/icons.png';
$items: (0px, 81px, 0px, -81px, 16px, 14px, 150px, 182px, './src/assets/images/icons.png', 'items', );
$logo2-name: 'logo2';
$logo2-x: 0px;
$logo2-y: 132px;
$logo2-offset-x: 0px;
$logo2-offset-y: -132px;
$logo2-width: 150px;
$logo2-height: 50px;
$logo2-total-width: 150px;
$logo2-total-height: 182px;
$logo2-image: './src/assets/images/icons.png';
$logo2: (0px, 132px, 0px, -132px, 150px, 50px, 150px, 182px, './src/assets/images/icons.png', 'logo2', );
$much-less-name: 'much-less';
$much-less-x: 0px;
$much-less-y: 105px;
$much-less-offset-x: 0px;
$much-less-offset-y: -105px;
$much-less-width: 17px;
$much-less-height: 17px;
$much-less-total-width: 150px;
$much-less-total-height: 182px;
$much-less-image: './src/assets/images/icons.png';
$much-less: (0px, 105px, 0px, -105px, 17px, 17px, 150px, 182px, './src/assets/images/icons.png', 'much-less', );
$spritesheet-width: 150px;
$spritesheet-height: 182px;
$spritesheet-image: './src/assets/images/icons.png';
$spritesheet-sprites: ($close, $expandable, $expanded, $item, $items, $logo2, $much-less, );
$spritesheet: (150px, 182px, './src/assets/images/icons.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
